/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SalesRole;

import Business.Business;
import Business.Order.Order;
import Business.Organization.Organization;
import Business.Organization.SalesOrganization;
import Business.Organization.ShippingOrganization;
import Business.Organization.SupplierOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderRequests;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.WorkRequestResult;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Praneet
 */
public class SalesOrderProcessing extends javax.swing.JPanel {

    /**
     * Creates new form SalesOrderProcessing
     */
     JPanel userProcessContainer;
    UserAccount userAccount;
    SalesOrganization salesOrganization;
    Business business;
    public SalesOrderProcessing(JPanel ucp,UserAccount userAccount,SalesOrganization organization,Business business) {
        initComponents();
        this.userProcessContainer = ucp;
        this.userAccount = userAccount;
        this.business = business;
        salesOrganization = organization;
        populateOrderHistory();
    }

     private void populateOrderHistory()
    {
        DefaultTableModel dtm = (DefaultTableModel)orderStatusJTable.getModel();
        dtm.setRowCount(0);
               int rowCount = orderStatusJTable.getRowCount();

        for(int i = rowCount - 1; i >=0; i--) {
            dtm.removeRow(i);}
        for(WorkRequest request : salesOrganization.getWorkQueue().getWorkRequestList()){
            
            if (request instanceof OrderRequests){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            Order order= ((OrderRequests) request).getOrder();
            row[3] = order;
            row[4] = order.getTimeStamp();
            String result = ((OrderRequests) request).getTestResult();
            row[5] = result == null ? "Waiting" : result;
            dtm.addRow(row);
            }
        }
        
//        for(Order order : business.getMasterOrderCatalog().getOrderCatalog())
//        {
//           
//            Object row[] = new Object[3];
//            row[0] = order;
//            row[1] = order.getOrderItemList();
//            row[2] = order.getTimeStamp();
//              
//            dtm.addRow(row);
//            
//        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderStatusJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        refreshTable = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderStatusJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Order", "Date", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderStatusJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 524, 97));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, -1, -1));

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 148, -1, -1));

        jButton1.setText("Send to Shipping Department");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, -1, -1));

        refreshTable.setText("refresh");
        refreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableActionPerformed(evt);
            }
        });
        add(refreshTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = orderStatusJTable.getSelectedRow();

        if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        
        System.out.println(orderStatusJTable.getValueAt(selectedRow, 0).getClass());
        
        WorkRequest request = (WorkRequest)orderStatusJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Processing");
        populateOrderHistory();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = orderStatusJTable.getSelectedRow();

        if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }

        OrderRequests request = (OrderRequests)orderStatusJTable.getValueAt(selectedRow, 0);

        request.setStatus("Processing");

        SalesOrderProcessingResult spwrj = new SalesOrderProcessingResult(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", spwrj);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = orderStatusJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
Organization org = null;
        OrderRequests request = (OrderRequests)orderStatusJTable.getValueAt(selectedRow, 0);
        
        for (Organization organization : business.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof ShippingOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableActionPerformed
        // TODO add your handling code here:
        populateOrderHistory();
    }//GEN-LAST:event_refreshTableActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderStatusJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshTable;
    // End of variables declaration//GEN-END:variables
}
